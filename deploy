#!/usr/bin/env python3
import argparse
import subprocess
import os
from datetime import datetime
import re
import sys
from pathlib import Path
from dotenv import load_dotenv
import shutil

CONTEXTS = ["internet", "intranet"]
ALLOWED_INSTANCES = ["prepub", "prod", "dev", "local"]
APP_NAME = "sitn_applications"

def fetch_last_env(env_file_name):
    print(f"Mise √† jour du fichier {env_file_name}")
    if not "SITN_ENV_PATH" in os.environ:
        print(f"La variable d'environnement SITN_ENV_PATH n'est pas d√©finie!")
        os.environ["SITN_ENV_PATH"] = input("Ou se trouve le dossier des environnements de d√©ploiement?")

    env_file_path = f"{os.environ['SITN_ENV_PATH']}/{APP_NAME}/{env_file_name}"

    if not os.path.isfile(env_file_path):
        print(f"üí• {env_file_path} n'existe pas.")
        sys.exit(f"ERREUR: {env_file_path} pas √† jour!")
    
    shutil.copy(env_file_path, ".")

def check_settings_file(dest_instance):
    # Do not deploy to the internet with DEBUG set to True
    settings_file = Path("./sitn/settings.py")
    with open(settings_file, 'r') as f:
        settings = f.read()
    is_debug = bool(re.search(r"^\s*DEBUG\s*=\s*True\s*$", settings, re.MULTILINE))
    if is_debug:
        sys.exit("Cannot deploy if DEBUG=True in settings.py")

def main():
    parser = argparse.ArgumentParser(description="D√©ploiement sitn applications")
    parser.add_argument("env", nargs="*", help="The environment config")
    args = parser.parse_args()
    if len(args.env) != 2:
        sys.exit(
            "Vous devez utiliser ce script avec deux arguments. internet|intranet et prepub|prod|local|dev"
        )

    context = args.env[0]
    instance = args.env[1]

    if context not in CONTEXTS:
        sys.exit("Le premier argument est faux.")

    if instance not in ALLOWED_INSTANCES:
        sys.exit("Le deuxi√®me argument est faux.")

    env_file = f".env.{context}.{instance}"

    if instance in ["prepub", "prod"]:
        check_settings_file(instance)
        fetch_last_env(env_file)

    os.environ['ENV_FILE'] = env_file
    load_dotenv(Path(env_file), override=True)

    dest_docker_host = os.environ['DOCKER_HOST']
    os.environ['DOCKER_HOST'] = ""

    cmd = ["docker", "compose", "build"]
    print(" ".join(cmd))
    subprocess.check_call(cmd)

    cmd = ["docker", "compose", "push"]
    print(" ".join(cmd))
    subprocess.check_call(cmd)

    os.environ['DOCKER_HOST'] = dest_docker_host
    print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - DOCKER_HOST is: {os.environ['DOCKER_HOST']}")

    cmd = ["docker", "compose", "pull"]
    print(" ".join(cmd))
    subprocess.check_call(cmd)

    cmd = ["docker", "compose", "down", "-v"]
    print(" ".join(cmd))
    subprocess.check_call(cmd)

    cmd = ["docker", "compose", "up", "-d"]
    print(" ".join(cmd))
    subprocess.check_call(cmd)

    os.environ["DOCKER_HOST"] = ""
    print(f"\a{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - END")

if __name__ == "__main__":
    main()
